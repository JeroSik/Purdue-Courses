Starting on 2-13 at 13:48:16

Question q1
===========

*** PASS: test_cases/q1/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'D', 'C']
*** PASS: test_cases/q1/graph_bfs_vs_dfs.test
*** 	solution:		['2:A->D', '0:D->G']
*** 	expanded_states:	['A', 'D']
*** PASS: test_cases/q1/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q1/graph_manypaths.test
*** 	solution:		['2:A->B2', '0:B2->C', '0:C->D', '2:D->E2', '0:E2->F', '0:F->G']
*** 	expanded_states:	['A', 'B2', 'C', 'D', 'E2', 'F']
*** PASS: test_cases/q1/pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 130
*** 	nodes expanded:		146

### Question q1: 3/3 ###


Question q2
===========

*** PASS: test_cases/q2/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q2/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases/q2/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q2/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases/q2/pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269

### Question q2: 3/3 ###


Question q3
===========

*** PASS: test_cases/q3/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q3/graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases/q3/graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q3/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases/q3/ucs_0_graph.test
*** 	solution:		['Right', 'Down', 'Down']
*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
*** PASS: test_cases/q3/ucs_1_problemC.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269
*** PASS: test_cases/q3/ucs_2_problemE.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 74
*** 	nodes expanded:		260
*** PASS: test_cases/q3/ucs_3_problemW.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 152
*** 	nodes expanded:		173
*** PASS: test_cases/q3/ucs_4_testSearch.test
*** 	pacman layout:		testSearch
*** 	solution length: 7
*** 	nodes expanded:		14
*** PASS: test_cases/q3/ucs_5_goalAtDequeue.test
*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C']

### Question q3: 3/3 ###


Question q4
===========

*** PASS: test_cases/q4/astar_0.test
*** 	solution:		['Right', 'Down', 'Down']
*** 	expanded_states:	['A', 'B', 'D', 'C', 'G']
*** PASS: test_cases/q4/astar_1_graph_heuristic.test
*** 	solution:		['0', '0', '2']
*** 	expanded_states:	['S', 'A', 'D', 'C']
*** PASS: test_cases/q4/astar_2_manhattan.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		221
*** PASS: test_cases/q4/astar_3_goalAtDequeue.test
*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases/q4/graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases/q4/graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']

### Question q4: 3/3 ###


Question q5
===========

{(4, 5): {}}
{(4, 5): {}, (4, 6): 0}
{(4, 5): {}, (4, 6): 0, (5, 5): 0}
{(4, 5): {}, (3, 5): 0, (4, 6): 0, (5, 5): 0}
{(4, 5): {}, (5, 6): set([(6, 6)]), (3, 5): 0, (4, 6): 0, (5, 5): 0}
{(4, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (3, 5): 0}
{(4, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(4, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 3): 0, (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(6, 4): 0, (4, 3): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 3): 0, (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(1, 2): set([(1, 1)]), (6, 4): 0, (4, 3): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 3): 0, (1, 6): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(1, 2): set([(1, 1)]), (6, 4): 0, (4, 3): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 3): 0, (1, 6): 0, (3, 3): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(1, 2): set([(1, 1)]), (6, 4): 0, (4, 3): 0, (2, 6): set([(1, 6)]), (4, 6): 0, (6, 6): 0, (4, 5): {}, (5, 5): 0, (1, 4): 0, (6, 3): 0, (5, 6): set([(6, 6)]), (1, 3): 0, (1, 6): 0, (3, 3): 0, (3, 6): 0, (1, 5): set([(1, 6)]), (2, 5): 0, (5, 3): 0, (1, 1): 0, (6, 5): set([(6, 6)]), (3, 5): 0}
{(1, 3): 0, (6, 6): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (2, 5): 0, (1, 2): set([(1, 1)]), (5, 5): 0, (6, 3): 0, (1, 5): set([(1, 6)]), (3, 6): 0, (5, 3): 0, (1, 1): 0, (6, 4): 0, (3, 2): 0, (2, 6): set([(1, 6)]), (4, 5): {}, (1, 4): 0, (6, 5): set([(6, 6)]), (3, 3): 0, (3, 5): 0, (4, 6): 0, (4, 3): 0}
{(1, 3): 0, (6, 6): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (2, 5): 0, (1, 2): set([(1, 1)]), (5, 5): 0, (6, 3): 0, (1, 5): set([(1, 6)]), (3, 6): 0, (5, 3): 0, (1, 1): 0, (6, 4): 0, (3, 2): 0, (2, 6): set([(1, 6)]), (4, 5): {}, (1, 4): 0, (6, 5): set([(6, 6)]), (3, 3): 0, (3, 5): 0, (4, 6): 0, (3, 1): 0, (4, 3): 0}
{(1, 3): 0, (6, 6): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (2, 5): 0, (1, 2): set([(1, 1)]), (5, 5): 0, (6, 3): 0, (1, 5): set([(1, 6)]), (3, 6): 0, (5, 3): 0, (4, 1): 0, (1, 1): 0, (6, 4): 0, (3, 2): 0, (2, 6): set([(1, 6)]), (4, 5): {}, (1, 4): 0, (6, 5): set([(6, 6)]), (3, 3): 0, (3, 5): 0, (4, 6): 0, (3, 1): 0, (4, 3): 0}
{(1, 3): 0, (6, 6): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (5, 1): set([(6, 1)]), (2, 5): 0, (1, 2): set([(1, 1)]), (5, 5): 0, (6, 3): 0, (1, 5): set([(1, 6)]), (3, 6): 0, (5, 3): 0, (4, 1): 0, (1, 1): 0, (6, 4): 0, (3, 2): 0, (2, 6): set([(1, 6)]), (4, 5): {}, (1, 4): 0, (6, 5): set([(6, 6)]), (3, 3): 0, (3, 5): 0, (4, 6): 0, (3, 1): 0, (4, 3): 0}
{(1, 3): 0, (6, 6): 0, (5, 6): set([(6, 6)]), (1, 6): 0, (5, 1): set([(6, 1)]), (2, 5): 0, (1, 2): set([(1, 1)]), (5, 5): 0, (6, 3): 0, (1, 5): set([(1, 6)]), (3, 6): 0, (5, 3): 0, (4, 1): 0, (1, 1): 0, (6, 4): 0, (3, 2): 0, (2, 6): set([(1, 6)]), (4, 5): {}, (1, 4): 0, (6, 5): set([(6, 6)]), (3, 3): 0, (3, 5): 0, (4, 6): 0, (6, 1): 0, (3, 1): 0, (4, 3): 0}
*** FAIL: Exception raised: Can not find a valid solution
*** 
*** Traceback (most recent call last):
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/grading.py", line 78, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),1800)(self) # Call the question's function
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/util.py", line 637, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 300, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/testClasses.py", line 57, in execute
***     if not f(grades):
***   File "autograder.py", line 295, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 407, in execute
***     solution, missedCorners = self.solution(search, searchAgents)
***   File "searchTestClasses.py", line 393, in solution
***     path = search.bfs(problem)
***   File "search.py", line 156, in breadthFirstSearch
***     raise AssertionError("Can not find a valid solution")
*** AssertionError: Can not find a valid solution
*** 

### Question q5: 0/3 ###


Question q6
===========

*** FAIL: Exception raised: 'dict' object has no attribute 'add'
*** 
*** Traceback (most recent call last):
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/grading.py", line 78, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),1800)(self) # Call the question's function
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/util.py", line 637, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 300, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/yoon/Desktop/Purdue-Courses/CS47100/HW1_search/testClasses.py", line 115, in execute
***     results.append(f(grades))
***   File "autograder.py", line 295, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 700, in execute
***     succs = problem.getSuccessors(start_state)
***   File "searchAgents.py", line 339, in getSuccessors
***     self.dircounter[state].add(nextState)
*** AttributeError: 'dict' object has no attribute 'add'
*** 

### Question q6: 0/3 ###


Question q7
===========

*** PASS: test_cases/q7/food_heuristic_1.test
*** FAIL: test_cases/q7/food_heuristic_10.test
*** Heuristic failed non-triviality test
*** Tests failed.

### Question q7: 0/4 ###


Finished at 13:48:17

Provisional grades
==================
Question q1: 3/3
Question q2: 3/3
Question q3: 3/3
Question q4: 3/3
Question q5: 0/3
Question q6: 0/3
Question q7: 0/4
------------------
Total: 12/22

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

