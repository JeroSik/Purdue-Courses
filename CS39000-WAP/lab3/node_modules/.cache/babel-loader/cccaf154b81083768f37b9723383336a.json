{"ast":null,"code":"var _jsxFileName = \"/home/yoon/Desktop/Purdue-Courses/CS39000-WAP/lab3/src/components/board.js\";\nimport React, { Component } from \"react\";\nimport { Button, Table } from \"reactstrap\";\nimport Row from \"./row.js\";\nimport Tile from \"./tile.js\";\nconst rows = 6;\nconst cols = 7;\nconst player1 = 1;\nconst player2 = 2;\n\nconst checkElements = arr => /([12]),\\1,\\1,\\1/.test(arr.toString());\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /*\r\n      Part 1:\r\n      Add appropriate state values\r\n      */\n      board: [[]],\n      currPlayer: 1,\n      gameOver: false\n    };\n  }\n\n  createBoard() {\n    /*\r\n    Part 1:\r\n    Initialize board with null values\r\n    */\n    let emptyBoard = new Array(6);\n\n    for (let i = 0; i < emptyBoard.length; i++) {\n      emptyBoard[i] = new Array(7);\n      emptyBoard[i].fill(null);\n    }\n\n    this.setState({\n      board: emptyBoard\n    });\n  }\n\n  placeToken(col) {\n    const _this$state = this.state,\n          gameOver = _this$state.gameOver,\n          board = _this$state.board,\n          currPlayer = _this$state.currPlayer;\n    let newBoard = board;\n\n    if (!gameOver) {\n      /*\r\n      Part 3:\r\n      Place the token in the appropriate column, update the current player and update the state accordingly\r\n      */\n      console.log(col);\n    }\n  }\n\n  checkColumns(table) {\n    return table.reduce((hasMatch, column) => hasMatch || checkElements(column), false);\n  }\n\n  checkRows(table) {\n    for (let i = 0; i < table[0].length; ++i) {\n      let rowArray = table.map(column => column[i]);\n      if (checkElements(rowArray)) return true;\n    }\n\n    return false;\n  }\n\n  checkTable(table) {\n    return this.checkRows(table) || this.checkColumns(table);\n  }\n\n  componentDidMount() {\n    this.createBoard();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const _this$state2 = this.state,\n          board = _this$state2.board,\n          gameOver = _this$state2.gameOver;\n    /*\r\n    Part 4:\r\n    End the game if a player wins \r\n    */\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          board = _this$state3.board,\n          currPlayer = _this$state3.currPlayer,\n          gameOver = _this$state3.gameOver;\n    const playerColor = gameOver ? currPlayer === 1 ? \"yellow\" : \"red\" : currPlayer === 1 ? \"red\" : \"yellow\";\n    let connectBoard = board.map((row, index) => React.createElement(Row, {\n      key: index,\n      row: row,\n      placeToken: this.placeToken.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex justify-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      className: \"btn-block\",\n      onClick: () => {\n        this.createBoard();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"New Game\")), React.createElement(\"div\", {\n      className: \"flex justify-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Table, {\n      style: {\n        marginBottom: \"0px\"\n      },\n      className: \"w-30 b--light-blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    },\n    /*\r\n    Part 2:\r\n    Map rows in board to individual Row components with the .map function.\r\n    Make sure to pass placeToken function so that the child component can call the function\r\n    */\n    connectBoard)), React.createElement(\"h2\", {\n      className: \"flex justify-center w-20 \".concat(playerColor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, gameOver ? \"Player \".concat(currPlayer === 1 ? \"2\" : \"1\", \" Won!\") : \"Player \".concat(currPlayer, \"'s Turn!\"))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/yoon/Desktop/Purdue-Courses/CS39000-WAP/lab3/src/components/board.js"],"names":["React","Component","Button","Table","Row","Tile","rows","cols","player1","player2","checkElements","arr","test","toString","Board","constructor","props","state","board","currPlayer","gameOver","createBoard","emptyBoard","Array","i","length","fill","setState","placeToken","col","newBoard","console","log","checkColumns","table","reduce","hasMatch","column","checkRows","rowArray","map","checkTable","componentDidMount","componentDidUpdate","prevProps","prevState","render","playerColor","connectBoard","row","index","bind","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport Row from \"./row.js\";\r\nimport Tile from \"./tile.js\";\r\n\r\nconst rows = 6;\r\nconst cols = 7;\r\nconst player1 = 1;\r\nconst player2 = 2;\r\nconst checkElements = arr => /([12]),\\1,\\1,\\1/.test(arr.toString());\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      /*\r\n      Part 1:\r\n      Add appropriate state values\r\n      */\r\n      board: [[]],\r\n      currPlayer: 1,\r\n      gameOver: false,\r\n    };\r\n  }\r\n  \r\n  createBoard() {\r\n    /*\r\n    Part 1:\r\n    Initialize board with null values\r\n    */\r\n    let emptyBoard = new Array(6);\r\n    for (let i = 0; i < emptyBoard.length; i++) {\r\n      emptyBoard[i] = new Array(7);\r\n      emptyBoard[i].fill(null);\r\n    }\r\n\r\n    this.setState({board: emptyBoard});\r\n  }\r\n\r\n  placeToken(col) {\r\n    const { gameOver, board, currPlayer } = this.state;\r\n    let newBoard = board;\r\n    if (!gameOver) {\r\n      /*\r\n      Part 3:\r\n      Place the token in the appropriate column, update the current player and update the state accordingly\r\n      */\r\n      console.log(col);\r\n    }\r\n  }\r\n\r\n  checkColumns(table) {\r\n    return table.reduce(\r\n      (hasMatch, column) => hasMatch || checkElements(column),\r\n      false\r\n    );\r\n  }\r\n\r\n  checkRows(table) {\r\n    for (let i = 0; i < table[0].length; ++i) {\r\n      let rowArray = table.map(column => column[i]);\r\n      if (checkElements(rowArray)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkTable(table) {\r\n    return this.checkRows(table) || this.checkColumns(table);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createBoard();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { board, gameOver } = this.state;\r\n    /*\r\n    Part 4:\r\n    End the game if a player wins \r\n    */\r\n  }\r\n\r\n  render() {\r\n    const { board, currPlayer, gameOver } = this.state;\r\n    const playerColor = gameOver\r\n      ? currPlayer === 1\r\n        ? \"yellow\"\r\n        : \"red\"\r\n      : currPlayer === 1\r\n      ? \"red\"\r\n      : \"yellow\";\r\n    let connectBoard = board.map((row, index) => <Row key={index} row={row} placeToken={this.placeToken.bind(this)}/>);\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"flex justify-center\">\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"btn-block\"\r\n            onClick={() => {\r\n              this.createBoard();\r\n            }}\r\n          >\r\n            New Game\r\n          </Button>\r\n        </div>\r\n        <div className=\"flex justify-center\">\r\n          <Table style={{ marginBottom: \"0px\" }} className=\"w-30 b--light-blue\">\r\n            <thead></thead>\r\n            <tbody>\r\n              {\r\n                /*\r\n                Part 2:\r\n                Map rows in board to individual Row components with the .map function.\r\n                Make sure to pass placeToken function so that the child component can call the function\r\n                */\r\n                connectBoard\r\n              }\r\n            </tbody>\r\n          </Table>\r\n          <h2 className={`flex justify-center w-20 ${playerColor}`}>\r\n            {gameOver\r\n              ? `Player ${currPlayer === 1 ? \"2\" : \"1\"} Won!`\r\n              : `Player ${currPlayer}'s Turn!`}\r\n          </h2>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}